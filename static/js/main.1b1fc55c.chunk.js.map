{"version":3,"sources":["serviceWorker.ts","lib/Const.ts","store/ScenarioSlice.ts","store/model/ScenarioModel.ts","store/model/ParagraphModel.ts","store/model/TodoModel.ts","lib/TimerUtil.ts","lib/StorageUtil.ts","lib/GAUtil.ts","view/l1/ScenarioArea.tsx","view/l1/ScenarioAreaCount.tsx","view/l1/MemoArea.tsx","view/l1/Center.tsx","view/l1/Left.tsx","view/l1/Right.tsx","view/l1/ParagraphTitle.tsx","lib/ScenarioUtil.ts","view/l1/DeleteParagraphButton.tsx","view/l2/ParagraphHeader.tsx","view/l1/AddTodoButton.tsx","view/l2/Todo.tsx","view/l3/TodoArea.tsx","view/l4/Paragraph.tsx","view/l1/DeleteScenarioButton.tsx","view/l1/JsonImportButton.tsx","lib/FileUtil.ts","view/l1/DumpButton.tsx","view/l1/HelpButton.tsx","view/l1/ScenarioTitle.tsx","view/l3/Header.tsx","view/l1/AddParagraphButton.tsx","view/l2/AutoSaveCautionModal.tsx","view/l5/Hakogaki.tsx","App.tsx","store/rootReducer.ts","store/index.ts","Provider.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","NotificationType","StorageKeyScenario","APP_NAME","initialState","formatVersion","title","paragraphList","subTitle","text","memo","todo","checked","old","slice","createSlice","name","reducers","load","state","action","scenario","payload","alert","deleteScenario","addParagraph","push","deleteParagraph","splice","paragraphId","changeTitle","changeSubTitle","changeText","addTodo","deleteTodo","todoId","changeTodoText","toggleTodo","changeMemo","TimerUtil","timer","interval","key","func","this","setTimeout","clearTimeout","setInterval","clearInterval","valid","localStorage","value","setItem","getItem","removeItem","pagename","gtagPageview","Area","styled","textarea","App","props","dispatch","useDispatch","placeholder","onChange","e","target","ScenarioSlice","actions","Main","div","length","useSelector","id","children","TextField","variant","onClick","stopPropagation","paragraph","some","p","reduce","sum","toodoReducer","t","map","join","ret","previousTextLength","getTextLength","nowTextLength","previousCheckedTodoNum","getCheckedTodoNum","nowCheckedTodoNum","diff","IconButton","Tooltip","arrow","size","ScenarioUtil","isParagraphEmpty","confirm","Delete","Title","ParagraphTitle","Left","Center","Right","DeleteParagraphButton","Add","TodoTextField","Checkbox","Root","todoList","i","Todo","className","AddTodoButton","Accordion","Header","AccordionSummary","Detail","AccordionDetails","Sub","MemoParagraphHeader","React","ParagraphHeader","MemoTodoArea","TodoArea","MemoMemoArea","MemoArea","expandIcon","ExpandMore","ScenarioArea","ScenarioAreaCount","enqueueSnackbar","useSnackbar","a","files","JSON","parse","C","SUCCESS","ERROR","component","UploadFile","type","hidden","accept","fileName","aTag","document","createElement","download","href","URL","createObjectURL","Blob","dataset","downloadurl","click","useState","anchorEl","setAnchorEl","open","handleClose","undefined","event","currentTarget","Save","Menu","onClose","MenuListProps","MenuItem","getTitle","FileUtil","stringify","getProgress","forEach","message","getScenarioText","Help","Link","color","underline","ToolTitle","span","ScenarioTitle","DeleteScenarioButton","JsonImportButton","DumpButton","HelpButton","style","position","top","left","transform","width","bgcolor","border","boxShadow","StyledBox","Box","StyledButton","Button","Message","ref","setOpen","StorageUtil","Modal","sx","Typography","MemoHeader","MemoParagraph","Paragraph","MemoAddParagraphButton","AddParagraphButton","autoSaveCationModalRef","useRef","scenarioRef","useEffect","current","json","loadPayload","remove","loadStorage","save","GAUtil","pageview","AutoSaveCautionModal","basename","process","path","Hakogaki","rootReducer","combineReducers","reducer","store","configureStore","autoHideDuration","ReactDOM","render","StrictMode","Provider","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.1b1fc55c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export const TimerSaveProject = 'TimerSaveProject';\n\nexport const StorageKeyScenario = 'StorageKeyScenario';\nexport const StorageKeyAutoSaveCationModal = 'StorageKeyAutoSaveCationModal';\n\nexport const IntervalSaveScenario = 2 * 1000;\nexport const DurationNotification = 5 * 1000;\n\nexport enum NotificationType {\n    SUCCESS = 'success',\n    WARNING = 'warning',\n    ERROR = 'error',\n}\n\nexport const APP_NAME = 'HAKOGAKI (β)';\nexport const NOTITLE = 'タイトル未定'; // ファイル名で使用\n\nexport const CurrentScenarioFormatVersion = 1;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport * as C from '../lib/Const';\n\nimport ScenarioModel, { createScenario } from './model/ScenarioModel';\nimport { createParagraph } from './model/ParagraphModel';\nimport { createTodo } from './model/TodoModel';\n\n\nexport interface LoadPayload {\n    scenario: ScenarioModel;\n}\n\nexport interface DeleteParagraphPayload {\n    paragraphId: number;\n}\n\nexport interface ChangeTitlePayload {\n    title: string;\n}\n\nexport interface ChangeSubTitlePayload {\n    paragraphId: number;\n    subTitle: string;\n}\n\nexport interface ChangeTextPayload {\n    paragraphId: number;\n    text: string;\n}\n\nexport interface AddTodoPayload {\n    paragraphId: number;\n}\n\nexport interface DeleteTodoPayload {\n    paragraphId: number;\n    todoId: number;\n}\n\nexport interface ChangeTodoTextPayload {\n    paragraphId: number;\n    todoId: number;\n    text: string;\n}\n\nexport interface ToggleTodoPayload {\n    paragraphId: number;\n    todoId: number;\n}\n\nexport interface ChangeMemoPayload {\n    paragraphId: number;\n    memo: string;\n}\n\nconst initialState: ScenarioModel = createScenario();\n\nconst slice = createSlice({\n    name: \"scenario\",\n    initialState,\n    reducers: {\n        load: (state, action: PayloadAction<LoadPayload>) => {\n            const scenario = action.payload.scenario;\n            if (scenario.formatVersion < C.CurrentScenarioFormatVersion) {\n                // TODO\n                window.alert('プロジェクトファイルのバージョンが古く読み込めません。');\n            }\n            state.title = scenario.title;\n            state.paragraphList = scenario.paragraphList;\n            state.old = scenario.paragraphList; // 読み込み時点のデータをoldにセット\n        }\n        , deleteScenario: (state: ScenarioModel) => {\n            const scenario = createScenario();\n            state.title = scenario.title;\n            state.paragraphList = scenario.paragraphList;\n            state.old = scenario.paragraphList;\n        }\n        , addParagraph: (state: ScenarioModel) => {\n            state.paragraphList.push(createParagraph());\n        }\n        \n        , deleteParagraph: (state: ScenarioModel, action: PayloadAction<DeleteParagraphPayload>) => {\n            state.paragraphList.splice(action.payload.paragraphId, 1);\n        }\n\n        , changeTitle: (state, action: PayloadAction<ChangeTitlePayload>) => {\n            state.title = action.payload.title;\n        }\n\n        , changeSubTitle: (state, action: PayloadAction<ChangeSubTitlePayload>) => {\n            state.paragraphList[action.payload.paragraphId].subTitle\n                = action.payload.subTitle;\n        }\n\n        , changeText: (state, action: PayloadAction<ChangeTextPayload>) => {\n            state.paragraphList[action.payload.paragraphId].text\n                = action.payload.text;\n        }\n\n        , addTodo: (state, action: PayloadAction<AddTodoPayload>) => {\n            state.paragraphList[action.payload.paragraphId]\n                .todo.push(createTodo());\n        }\n\n        , deleteTodo: (state, action: PayloadAction<DeleteTodoPayload>) => {\n            state.paragraphList[action.payload.paragraphId]\n                .todo.splice(action.payload.todoId, 1);\n        }\n\n        , changeTodoText: (state, action: PayloadAction<ChangeTodoTextPayload>) => {\n            state.paragraphList[action.payload.paragraphId]\n                .todo[action.payload.todoId].text = action.payload.text;\n        }\n        \n        , toggleTodo: (state, action: PayloadAction<ToggleTodoPayload>) => {\n            const checked = state.paragraphList[action.payload.paragraphId]\n                .todo[action.payload.todoId].checked;\n            state.paragraphList[action.payload.paragraphId]\n                .todo[action.payload.todoId].checked = !checked;\n        }\n        \n        ,changeMemo: (state, action: PayloadAction<ChangeMemoPayload>) => {\n            state.paragraphList[action.payload.paragraphId].memo\n                = action.payload.memo;\n        },\n    }\n});\n\nexport default slice;","import * as C from '../../lib/Const';\n\nimport ParagraphModel, { createParagraph } from './ParagraphModel';\n\n\n// Scenarioのインターフェースを変えるときは\n// ・CurrentScenarioFormatVersionを上げる\n// ・load関数内で後方互換性をもたせる（詳細は作るときに考える。）\nexport default interface Scenario {\n    formatVersion: number;\n    title: string;\n    paragraphList: ParagraphModel[];\n    old: ParagraphModel[];\n}\n\nexport const createScenario = () :Scenario => {\n    return {\n        formatVersion: C.CurrentScenarioFormatVersion,\n        title: '',\n        paragraphList: [\n            createParagraph()\n        ],\n        old: []\n    }\n}","import TodoModel, { createTodo } from './TodoModel';\n\n\nexport default interface ParagraphModel {\n    subTitle: string;\n    text: string;\n    memo: string;\n    todo: TodoModel[];\n}\n\nexport const createParagraph = () :ParagraphModel => {\n    return {\n        subTitle: '',\n        text: '',\n        memo: '',\n        todo: [\n            createTodo(),\n            createTodo(),\n            createTodo(),\n        ]\n    }\n}","\n\nexport default interface Todo {\n    text: string;\n    checked: boolean;\n}\n\nexport const createTodo = (): Todo => {\n    return {\n        text: '',\n        checked: false,\n    }\n}","\n\nclass TimerUtil {\n    timer: { [key: string]: number; } = {};\n    interval: { [key: string]: number; } = {};\n\n    setTimer(key: string, func: TimerHandler, interval: number) {\n        if (typeof this.timer[key] !== 'undefined') {\n            alert('システムエラーです。');\n            return;\n        }\n        this.timer[key] = setTimeout(func, interval);\n    }\n\n    clearTimer(key: string) {\n        if (typeof this.timer[key] == 'undefined') {\n            alert('システムエラーです。');\n            return;\n        }\n        clearTimeout(this.timer[key]);\n    }\n\n    setInterval(key: string, func: TimerHandler, interval: number) {\n        if (typeof this.interval[key] !== 'undefined') {\n            alert('システムエラーです。');\n            return;\n        }\n        this.interval[key] = setInterval(func, interval);\n    }\n\n    clearInterval(key: string) {\n        if (typeof this.interval[key] == 'undefined') {\n            alert('システムエラーです。');\n            return;\n        }\n        clearInterval(this.interval[key]);\n    }\n}\n\nexport default new TimerUtil();","\n\nclass StorageUtil {\n    valid: boolean;\n\n    constructor() {\n        this.valid = typeof window.localStorage !== 'undefined'\n    }\n\n    save(key: string, value: string) {\n        if (this.valid) {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    load(key: string) {\n        if (this.valid) {\n            return localStorage.getItem(key);\n        }\n    }\n\n    remove(key: string) {\n        if (this.valid) {\n            return localStorage.removeItem(key);\n        }\n    }\n\n}\n\nexport default new StorageUtil();","\n\ndeclare global {\n    interface Window { gtagPageview: any; }\n}\n\nclass GAUtil {\n    pageview(pagename: string) {\n        if (process.env.NODE_ENV !== 'production') {\n            return null;\n        }\n\n        if (window.gtagPageview) {\n            window.gtagPageview(pagename);\n        }\n    }\n}\n\nexport default new GAUtil();","import React from 'react';\nimport { useDispatch, } from \"react-redux\";\nimport styled from 'styled-components';\n\nimport ScenarioSlice, { ChangeTextPayload } from '../../store/ScenarioSlice';\n\n\ntype Props = {\n    paragraphId: number;\n    text: string;\n}\n\nconst Area = styled.textarea`\n    height: 400px;\n`;\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const payload: ChangeTextPayload = {\n            paragraphId: props.paragraphId,\n            text: e.target.value\n        }\n        dispatch(ScenarioSlice.actions.changeText(payload));\n    }\n\n    return (\n        <Area\n            placeholder=\"本文を入力\"\n            onChange={onChange}\n            value={props.text}\n        />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Main = styled.div`\n        \n`;\n\ntype Props = {\n    text: string;\n}\n\nconst App = (props: Props) => {\n    return (\n        <Main>\n            {props.text.length}\n        </Main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\n\nimport { RootState } from '../../store/rootReducer';\nimport ScenarioSlice, { ChangeMemoPayload } from '../../store/ScenarioSlice';\n\n\nconst Area = styled.textarea`\n    height: 100%;\n`;\n\ntype Props = {\n    id: number;\n}\n\nconst App = (props: Props) => {\n    const memo = useSelector((state: RootState) => \n        state.scenario.paragraphList[props.id].memo);\n    const dispatch = useDispatch();\n\n    const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const payload: ChangeMemoPayload = {\n            paragraphId: props.id,\n            memo: e.target.value\n        }\n        dispatch(ScenarioSlice.actions.changeMemo(payload));\n    }\n\n    return (\n        <Area\n            placeholder=\"メモを入力\"\n            onChange={onChange}\n            value={memo}\n        />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Main = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: center;\n`;\n\ninterface Props {\n    children?: React.ReactNode;\n}\n\nconst App = (props: Props) => {\n    return (\n        <Main>\n            {props.children}\n        </Main>\n    );\n};\n\nexport default App;","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Main = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: flex-start;\n    margin-left: 20px;\n`;\n\ninterface Props {\n    children?: React.ReactNode;\n}\n\nconst App = (props: Props) => {\n    return (\n        <Main>\n            {props.children}\n        </Main>\n    );\n};\n\nexport default App;","import React from 'react';\nimport styled from 'styled-components';\n\n\nconst Main = styled.div`\n    display: flex;\n    flex: 1;\n    align-content: center;\n    justify-content: flex-end;\n    margin-right: 20px;\n`;\n\ninterface Props {\n    children?: React.ReactNode;\n}\n\nconst App = (props: Props) => {\n    return (\n        <Main>\n            {props.children}\n        </Main>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { useDispatch, } from \"react-redux\";\nimport styled from 'styled-components';\nimport { TextField } from '@mui/material/';\n\nimport ScenarioSlice, { ChangeSubTitlePayload } from '../../store/ScenarioSlice';\n\n\ntype Props = {\n    paragraphId: number;\n    subTitle: string;\n}\n\nconst Area = styled(TextField)`\n`;\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const payload: ChangeSubTitlePayload = {\n            paragraphId: props.paragraphId,\n            subTitle: e.target.value\n        }\n        dispatch(ScenarioSlice.actions.changeSubTitle(payload));\n    }\n\n    const onClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        e.stopPropagation(); // アコーディオンの開閉をしないようにする。\n    }\n\n    return (\n        <Area\n            variant='standard'\n            placeholder='段落のタイトル'\n            onChange={onChange}\n            onClick={onClick}\n            value={props.subTitle}\n        />\n    );\n};\n\nexport default App;","import * as C from './Const';\n\nimport ParagraphModel from \"../store/model/ParagraphModel\";\nimport ScenarioModel from \"../store/model/ScenarioModel\";\nimport TodoModel from \"../store/model/TodoModel\";\n\n\nclass ScenarioUtil {\n\n    isParagraphEmpty(paragraph: ParagraphModel): boolean {\n        if (paragraph.subTitle.length > 0) return false;\n        if (paragraph.text.length > 0) return false;\n        if (paragraph.memo.length > 0) return false;\n        if (paragraph.todo.some((p) => { // todoは文字を書いているかどうかだけ見る\n            return p.text.length > 0;\n        })) {\n            return false;\n        }\n\n        return true;\n    }\n\n    getTextLength(paragraphList: ParagraphModel[]): number {\n        return paragraphList.reduce((sum: number, p: ParagraphModel) => {\n            return sum + p.text.length\n        }, 0);\n    }\n\n    getCheckedTodoNum(paragraphList: ParagraphModel[]): number {\n        const toodoReducer = (sum: number, t: TodoModel) => {\n            return sum + (t.checked ? 1 : 0);\n        }\n\n        const paragraphReducer = (sum: number, p: ParagraphModel) => {\n            return sum + p.todo.reduce(toodoReducer, 0);\n        }\n\n        return paragraphList.reduce(paragraphReducer, 0);\n    }\n\n    getTitle(scenario: ScenarioModel) {\n        return scenario.title ? scenario.title : C.NOTITLE;\n    }\n\n    getScenarioText(scenario: ScenarioModel) :string {\n        const ret = scenario.title ?\n        scenario.title + \"\\r\\n\\r\\n\" : '';\n    \n        return ret + scenario.paragraphList.map((p) => {\n            const title = p.subTitle ?\n                p.subTitle + \"\\r\\n\\r\\n\" : '';\n            return title + p.text + \"\\r\\n\\r\\n\";\n        }).join(\"\\r\\n\\r\\n\");\n    }\n\n    getProgress(scenario: ScenarioModel): string[] {\n        const ret: string[] = [];\n    \n        const previousTextLength = this.getTextLength(scenario.old);\n        const nowTextLength = this.getTextLength(scenario.paragraphList);\n        const previousCheckedTodoNum = this.getCheckedTodoNum(scenario.old);\n        const nowCheckedTodoNum = this.getCheckedTodoNum(scenario.paragraphList);\n    \n        if (previousTextLength < nowTextLength) {\n            const diff = nowTextLength - previousTextLength;\n            ret.push('【進捗】' + diff + '文字書きました。');\n        }\n    \n        if (previousCheckedTodoNum < nowCheckedTodoNum) {\n            const diff = nowCheckedTodoNum - previousCheckedTodoNum;\n            ret.push('【進捗】' + diff + '個のTodoを完了させました。');\n        }\n    \n        return ret;\n    }\n}\n\nexport default new ScenarioUtil();","import React from 'react';\nimport { useDispatch, } from \"react-redux\";\nimport styled from 'styled-components';\nimport { IconButton, Tooltip } from '@mui/material/';\nimport { Delete } from '@mui/icons-material/';\n\nimport ScenarioSlice, { DeleteParagraphPayload, } from '../../store/ScenarioSlice';\nimport ParagraphModel from '../../store/model/ParagraphModel';\n\nimport ScenarioUtil from '../../lib/ScenarioUtil';\n\n\nconst Main = styled(IconButton)`\n    \n`;\n\ntype Props = {\n    paragraphId: number;\n    paragraph: ParagraphModel;\n}\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const onClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        const payload: DeleteParagraphPayload = {\n            paragraphId: props.paragraphId\n        }\n        if (ScenarioUtil.isParagraphEmpty(props.paragraph)\n            || confirm('段落を削除します。よろしいですか？')) {\n            dispatch(ScenarioSlice.actions.deleteParagraph(payload));\n        }\n\n        e.stopPropagation(); // アコーディオンの開閉をしないようにする。\n    }\n\n    return (\n        <Tooltip title=\"段落を削除\" arrow>\n            <IconButton\n                size={'small'}\n                onClick={onClick}\n            >\n                <Delete />\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default App;\n","import styled from 'styled-components';\n\nimport ParagraphModel from '../../store/model/ParagraphModel';\n\nimport Center from '../l1/Center';\nimport Left from '../l1/Left';\nimport Right from '../l1/Right';\nimport ParagraphTitle from '../l1/ParagraphTitle';\nimport DeleteParagraphButton from '../l1/DeleteParagraphButton';\n\n\nconst Main = styled.div`\n    display: flex;\n    width: 100%;\n`;\n\nconst Title = styled(ParagraphTitle)`\n    width: 70%;\n`;\n\ntype Props = {\n    paragraphId: number;\n    paragraph: ParagraphModel;\n}\n\nconst App = (props: Props) => {\n\n    return (\n        <Main>\n            <Left>\n                <Title\n                    paragraphId={props.paragraphId}\n                    subTitle={props.paragraph.subTitle}\n                />\n            </Left>\n            <Center>\n            </Center>\n            <Right>\n                <DeleteParagraphButton\n                    paragraphId={props.paragraphId}\n                    paragraph={props.paragraph}\n                />\n            </Right>            \n        </Main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { IconButton } from '@mui/material/';\nimport { Add } from '@mui/icons-material/';\n\nimport ScenarioSlice, { AddTodoPayload } from '../../store/ScenarioSlice';\n\n\nconst Main = styled(IconButton)`\n    display: flex;\n    align-content: center;\n    justify-content: center;\n`;\n\ntype Props = {\n    paragraphId: number\n}\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const add = () => {\n        const payload: AddTodoPayload = {\n            paragraphId: props.paragraphId,\n        }\n        dispatch(ScenarioSlice.actions.addTodo(payload));\n    }\n\n    return (\n        <Main onClick={add}>\n            <Add />\n        </Main>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport styled from 'styled-components';\nimport { Tooltip, IconButton, TextField, Checkbox } from '@mui/material/';\nimport { Delete } from '@mui/icons-material/';\n\nimport ScenarioSlice, { ChangeTodoTextPayload, DeleteTodoPayload, ToggleTodoPayload } from '../../store/ScenarioSlice';\nimport TodoModel from '../../store/model/TodoModel';\n\n\nconst Main = styled.div`\n    display: flex;\n    align-self: flex-start;\n    width: 100%;\n`;\n\nconst TodoTextField = styled(TextField)`\n    width: 100%;\n`;\n\nexport interface TodoProps {\n    paragraphId: number;\n    todoId: number;\n    todo: TodoModel;\n}\n\nconst App = (props: TodoProps) => {\n    const dispatch = useDispatch();\n\n    const toggle = ()=> {\n        const payload: ToggleTodoPayload = {\n            paragraphId: props.paragraphId,\n            todoId: props.todoId,\n        }\n        dispatch(ScenarioSlice.actions.toggleTodo(payload));\n    }\n\n    const changeText = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const payload: ChangeTodoTextPayload = {\n            paragraphId: props.paragraphId,\n            todoId: props.todoId,\n            text: e.target.value,\n        }\n        dispatch(ScenarioSlice.actions.changeTodoText(payload));\n    }\n\n    const deleteTodo = ()=> {\n        const payload: DeleteTodoPayload = {\n            paragraphId: props.paragraphId,\n            todoId: props.todoId,\n        }\n        dispatch(ScenarioSlice.actions.deleteTodo(payload));\n    }\n    \n    return (\n        <Main>\n            <Tooltip title=\"完了\" arrow>\n                <Checkbox checked={props.todo.checked} onClick={toggle} />\n            </Tooltip>\n            <TodoTextField\n                variant=\"standard\"\n                placeholder={\"Todo\"}\n                value={props.todo.text}\n                onChange={changeText}\n            />\n            <Tooltip title=\"Todoを削除\" arrow>\n            <IconButton\n                size={'small'}\n                onClick={deleteTodo}\n            >\n                <Delete />\n            </IconButton>\n        </Tooltip>\n            \n\n        </Main>\n    );\n};\n\nexport default App;","import React from 'react';\nimport styled from 'styled-components';\n\nimport TodoModel from '../../store/model/TodoModel';\n\nimport AddTodoButton from '../l1/AddTodoButton';\nimport Todo from '../l2/Todo';\n\n\nconst Root = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\ntype Props = {\n    paragraphId: number;\n    todoList: TodoModel[];\n}\n\nconst App = (props: Props) => {\n    const todo = props.todoList.map((e, i) => {\n        return (<Todo paragraphId={props.paragraphId} todoId={i} todo={e} key={i} />);\n    });\n    \n    return (\n        <Root className=\"todoArea\">\n            {todo}\n            <AddTodoButton paragraphId={props.paragraphId}/>\n        </Root>\n    );\n};\n\nexport default App;","import React from 'react';\nimport styled from 'styled-components';\nimport { Accordion, AccordionSummary, AccordionDetails } from '@mui/material/';\nimport { ExpandMore } from '@mui/icons-material/';\n\nimport ParagraphModel from '../../store/model/ParagraphModel';\n\nimport ScenarioArea from '../l1/ScenarioArea';\nimport ScenarioAreaCount from '../l1/ScenarioAreaCount';\nimport MemoArea from '../l1/MemoArea';\nimport ParagraphHeader from '../l2/ParagraphHeader';\nimport TodoArea from '../l3/TodoArea';\n\n\nconst Root = styled(Accordion)`\n    display: flex;\n    flex-direction: column;\n    width: 95%;\n    justify-content: space-between;\n    margin-top: 10px;\n`;\nconst Header = styled(AccordionSummary)`\n    width: 97%;\n    \n`;\n\nconst Detail = styled(AccordionDetails)`\n    display: flex;\n    width: 95%;\n    justify-content: space-between;\n    margin-top: 10px;\n`;\nconst Main = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 74%;\n`;\nconst Sub = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 24%;\n`;\n\ntype Props = {\n    paragraphId: number;\n    paragraph: ParagraphModel;\n}\n\nconst MemoParagraphHeader = React.memo(ParagraphHeader);\nconst MemoTodoArea = React.memo(TodoArea);\nconst MemoMemoArea = React.memo(MemoArea);\n\nconst App = (props: Props) => {\n    \n    return (\n        <Root className=\"paragraph\">\n            <Header\n                expandIcon={<ExpandMore />}\n            >\n                <MemoParagraphHeader\n                    paragraphId={props.paragraphId}\n                    paragraph={props.paragraph}\n                />\n            </Header>\n            <Detail>\n                <Main>\n                    <ScenarioArea\n                        paragraphId={props.paragraphId}\n                        text={props.paragraph.text}\n                    />\n                    <ScenarioAreaCount text={props.paragraph.text} />\n                </Main>\n                <Sub>\n                    <MemoTodoArea\n                        paragraphId={props.paragraphId}\n                        todoList={props.paragraph.todo}\n                    />\n                    <MemoMemoArea id={props.paragraphId} />\n                </Sub>\n            </Detail>\n        </Root>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { useDispatch } from \"react-redux\";\nimport styled from 'styled-components';\nimport { IconButton, Tooltip } from '@mui/material/';\nimport { Delete } from '@mui/icons-material/';\n\nimport ScenarioSlice from '../../store/ScenarioSlice';\n\n\nconst Main = styled(IconButton)`\n    \n`;\n\ntype Props = {\n\n}\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const onClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (confirm('シナリオを全削除します。よろしいですか？')) {\n            dispatch(ScenarioSlice.actions.deleteScenario());\n        }\n    }\n\n    return (\n        <Tooltip title=\"シナリオを削除\" arrow>\n            <IconButton\n                size={'small'}\n                onClick={onClick}\n            >\n                <Delete />\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { useSnackbar } from 'notistack';\n\nimport { IconButton, Tooltip } from '@mui/material/';\nimport { UploadFile } from '@mui/icons-material/';\n\nimport ScenarioSlice, { LoadPayload, } from '../../store/ScenarioSlice';\nimport Scenario from '../../store/model/ScenarioModel';\n\nimport * as C from '../../lib/Const';\n\n\nconst Main = styled(IconButton)`\n    \n`;\n\ntype Props = {\n}\n\nconst App = (props: Props) => {\n    const { enqueueSnackbar, } = useSnackbar();\n    const dispatch = useDispatch();\n\n    const load = async (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (!e.target.files) return;\n        const text = await e.target.files[0].text();\n\n        // TODO\n        try {\n            const scenario: Scenario = JSON.parse(text);\n            const payload: LoadPayload = {\n                scenario: scenario\n            };\n            dispatch(ScenarioSlice.actions.load(payload));\n            const message = 'プロジェクトファイルを読み込みました。';\n            enqueueSnackbar(message, { variant: C.NotificationType.SUCCESS });\n        } catch {\n            const message = 'プロジェクトファイルの読み込みに失敗しました。形式が間違っています。';\n            enqueueSnackbar(message, { variant: C.NotificationType.ERROR });\n        }\n\n        e.target.value = \"\"; // 空にすることで次のonchangeが発火するようにする\n    }\n\n    return (\n        <Tooltip title=\"プロジェクトを読込\" arrow>\n            <IconButton\n                component=\"label\"\n            >\n                <UploadFile />\n                <input type=\"file\" hidden accept=\".json\" onChange={load} />\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default App;\n","\n\nclass FileUtil {\n\n    download(fileName: string, text: string) {\n        const aTag = document.createElement(\"a\");\n        aTag.download = fileName;\n        aTag.href = URL.createObjectURL(new Blob([text], { type: \"text/plain\" }));\n        aTag.dataset.downloadurl = [\"text/plain\", aTag.download, aTag.href].join(\":\");\n        aTag.click();\n    }\n}\n\nexport default new FileUtil();","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { useSnackbar } from 'notistack';\n\nimport { IconButton, Tooltip, Menu, MenuItem } from '@mui/material/';\nimport { Save } from '@mui/icons-material/';\n\nimport { RootState } from '../../store/rootReducer';\nimport ScenarioModel from '../../store/model/ScenarioModel';\n\nimport * as C from '../../lib/Const';\nimport FileUtil from '../../lib/FileUtil';\nimport ScenarioUtil from '../../lib/ScenarioUtil';\n\n\nconst Root = styled.div`\n    display: flex;\n    align-content: center;\n    justify-content: center;\n`;\n\ntype Props = {\n}\n\nconst App = (props: Props) => {\n    const { enqueueSnackbar, } = useSnackbar();\n    const scenario: ScenarioModel = useSelector((state: RootState) => \n        state.scenario);\n\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n    const saveProject = () => {\n        const fileName = ScenarioUtil.getTitle(scenario) + '.json';\n        FileUtil.download(fileName, JSON.stringify(scenario));\n        handleClose();\n\n        ScenarioUtil.getProgress(scenario).forEach((message: string) => {\n            enqueueSnackbar(message, { variant: C.NotificationType.SUCCESS });\n        });\n    };\n    const saveScenario = () => {\n        const fileName = ScenarioUtil.getTitle(scenario) + '.txt';\n        FileUtil.download(fileName, ScenarioUtil.getScenarioText(scenario));\n        handleClose();\n    };\n\n    return (\n        <Root>\n            <Tooltip title=\"ファイルに保存\" arrow>\n                <IconButton\n                    aria-controls=\"basic-menu\"\n                    aria-haspopup=\"true\"\n                    aria-expanded={Boolean(anchorEl) ? 'true' : undefined}\n                    onClick={handleClick}\n                >\n                    <Save />\n                </IconButton>\n            </Tooltip>\n            <Menu\n                id=\"basic-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{ 'aria-labelledby': 'basic-button', }}\n            >\n                <MenuItem onClick={saveProject}>プロジェクトとして保存</MenuItem>\n                <MenuItem onClick={saveScenario}>作品として保存</MenuItem>\n            </Menu>\n        </Root>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { useSnackbar } from 'notistack';\n\nimport { IconButton, Tooltip, Menu, MenuItem, Link } from '@mui/material/';\nimport { Help } from '@mui/icons-material/';\n\n\n\nconst Root = styled.div`\n    display: flex;\n    align-content: center;\n    justify-content: center;\n`;\n\ntype Props = {\n}\n\nconst App = (props: Props) => {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <Root>\n            <Tooltip title=\"ヘルプ\" arrow>\n                <IconButton\n                    aria-controls=\"basic-menu\"\n                    aria-haspopup=\"true\"\n                    aria-expanded={Boolean(anchorEl) ? 'true' : undefined}\n                    onClick={handleClick}\n                >\n                    <Help />\n                </IconButton>\n            </Tooltip>\n            <Menu\n                id=\"basic-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{ 'aria-labelledby': 'basic-button', }}\n            >\n\n                <Link\n                    href='https://peing.net/ja/matchingrandom'\n                    color='inherit'\n                    underline=\"none\"\n                >\n                    <MenuItem>お問い合わせ</MenuItem>\n                </Link>\n            </Menu>\n        </Root>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { useDispatch, } from \"react-redux\";\nimport styled from 'styled-components';\nimport { TextField } from '@mui/material/';\n\nimport ScenarioSlice, { ChangeTitlePayload } from '../../store/ScenarioSlice';\n\n\ntype Props = {\n    title: string;\n}\n\nconst Area = styled(TextField)`\n`;\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        const payload: ChangeTitlePayload = {\n            title: e.target.value\n        }\n        dispatch(ScenarioSlice.actions.changeTitle(payload));\n    }\n\n    return (\n        <Area\n            variant='standard'\n            className='scenarioTitle'\n            placeholder='作品タイトル'\n            onChange={onChange}\n            value={props.title}\n            {...props}\n        />\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport * as C from '../../lib/Const';\n\nimport Center from '../l1/Center';\nimport Left from '../l1/Left';\nimport Right from '../l1/Right';\nimport DeleteScenarioButton from '../l1/DeleteScenarioButton';\nimport JsonImportButton from '../l1/JsonImportButton';\nimport DumpButton from '../l1/DumpButton';\nimport HelpButton from '../l1/HelpButton';\nimport ScenarioTitle from '../l1/ScenarioTitle';\n\n\nconst Root = styled.div`\n    display: flex;\n    width: 100%;\n    height: 50px;\n    background-color: #D7E6EF;\n    margin-bottom: 10px;\n`;\n\nconst ToolTitle = styled.span`\n    font-family: \"Helvetica Neue\", \"Helvetica\", \"Hiragino Sans\", \"Hiragino Kaku Gothic ProN\", \"Arial\", \"Yu Gothic\", \"Meiryo\", sans-serif;\n    font-size: 20px;\n    font-weight: bold;\n`\n\ntype Props = {\n    title: string;\n}\n\nconst App = (props: Props) => {\n    \n    return (\n        <Root className=\"header\">\n            <Left>\n                <ToolTitle>{C.APP_NAME}</ToolTitle>\n            </Left>\n            <Center>\n                <ScenarioTitle title={props.title} />\n            </Center>\n            <Right>\n                <DeleteScenarioButton />\n                <JsonImportButton />\n                <DumpButton /> \n                <HelpButton />\n            </Right>\n        </Root>\n    );\n};\n\nexport default App;","import React from 'react';\nimport { useDispatch, } from \"react-redux\";\nimport styled from 'styled-components';\nimport { IconButton, Tooltip, } from '@mui/material/';\nimport { Add } from '@mui/icons-material/';\n\nimport ScenarioSlice from '../../store/ScenarioSlice';\n\n\nconst Main = styled(IconButton)`\n    \n`;\n\ntype Props = {\n\n}\n\nconst App = (props: Props) => {\n    const dispatch = useDispatch();\n\n    return (\n        <Tooltip title=\"段落を追加\" arrow>\n            <Main onClick={() => dispatch(ScenarioSlice.actions.addParagraph())}>\n                <Add />\n            </Main>\n        </Tooltip>\n    );\n};\n\nexport default App;","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport { Box, Button, Typography, Modal } from '@mui/material';\n\nimport * as C from '../../lib/Const';\nimport StorageUtil from '../../lib/StorageUtil';\n\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 300,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\nconst StyledBox = styled(Box)`\n    display: flex;\n    flex-direction: column;\n    font-size: 14px;\n`;\n\nconst StyledButton = styled(Button)`\n    display: flex;\n    align-self: flex-end;\n    width: 120px;\n`;\n\nconst Message = styled.div`\n    margin-top: 10px;\n    margin-bottom: 10px;\n`;\n\ninterface Props {\n}\n\nexport interface AutoSaveCautionModalHandler {\n    open(): void;\n}\n\nconst App = React.forwardRef<AutoSaveCautionModalHandler>((props: Props, ref) => {\n    const [open, setOpen] = React.useState(false);\n\n    const neverOpen = () => {\n        // StorageUtil.save(C.StorageKeyAutoSaveCationModal, '1');\n        setOpen(false);\n    }\n\n    React.useImperativeHandle(ref, () => ({\n        open() {\n            if (StorageUtil.load(C.StorageKeyAutoSaveCationModal) == '1') {\n                return;\n            }\n            setOpen(true);\n        }\n    }));\n\n    return (\n        <div>\n            <Modal\n                open={open}\n                onClose={() => setOpen(false)}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <StyledBox sx={style}>\n                    <Typography variant=\"h6\" component=\"h4\">\n                        注意\n                    </Typography>\n                    <Message>{''\n                        + 'シナリオは定期的にファイルに保存することをオススメします。'\n                        + 'ブラウザに自動保存されたデータは予期せぬタイミングで消えることがあります。'\n                    }\n                    </Message>\n                    \n                    <StyledButton\n                        variant=\"text\"\n                        size=\"small\"\n                        onClick={neverOpen}\n                    >\n                        次から表示しない\n                    </StyledButton>\n                </StyledBox>\n            </Modal>\n        </div>\n    );\n});\n\nexport default App;","import React, { useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styled from 'styled-components';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useSnackbar } from 'notistack';\n\nimport { RootState } from '../../store/rootReducer';\nimport ScenarioSlice, { LoadPayload } from '../../store/ScenarioSlice';\nimport Scenario from '../../store/model/ScenarioModel';\n\nimport * as C from '../../lib/Const';\nimport TimerUtil from '../../lib/TimerUtil';\nimport StorageUtil from '../../lib/StorageUtil';\nimport GAUtil from '../../lib/GAUtil';\n\nimport Paragraph from '../l4/Paragraph';\nimport Header from '../l3/Header';\nimport AddParagraphButton from '../l1/AddParagraphButton';\nimport AutoSaveCautionModal, { AutoSaveCautionModalHandler } from '../l2/AutoSaveCautionModal';\n\n\nconst Main = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst MemoHeader = React.memo(Header);\nconst MemoParagraph = React.memo(Paragraph);\nconst MemoAddParagraphButton = React.memo(AddParagraphButton);\n\ninterface Props {\n}\n\nconst App = (props: Props) => {\n    const { enqueueSnackbar, } = useSnackbar();\n    const dispatch = useDispatch();\n    const scenario = useSelector((state: RootState) => state.scenario);\n    const paragraphList = scenario.paragraphList.map((e, i) => {\n        return (<MemoParagraph paragraphId={i} paragraph={e} key={i} />);\n    });\n    const autoSaveCationModalRef = React.useRef({} as AutoSaveCautionModalHandler);\n\n    const loadStorage = () => {\n        const json = StorageUtil.load(C.StorageKeyScenario);\n        if (typeof json == 'string') {\n            try {\n                const scenario: Scenario = JSON.parse(json);\n                const loadPayload: LoadPayload = {\n                    scenario: scenario\n                }\n                dispatch(ScenarioSlice.actions.load(loadPayload));\n\n                // 通知\n                enqueueSnackbar('前回のデータを読み込みました。', { variant: C.NotificationType.SUCCESS });\n                autoSaveCationModalRef.current.open();\n            } catch { // ERROR\n                StorageUtil.remove(C.StorageKeyScenario);\n            }\n\n        }\n    }\n\n    // setIntervalの中で参照できるようにする。\n    const scenarioRef = useRef(scenario);\n    useEffect(() => {\n        scenarioRef.current = scenario;\n      }, [scenario]);\n\n    const init = () => { // 初回のみ実行\n        loadStorage();\n\n        // 自動保存\n        TimerUtil.setInterval(C.TimerSaveProject, () => {\n            StorageUtil.save(C.StorageKeyScenario, JSON.stringify(scenarioRef.current));\n        }, C.IntervalSaveScenario);\n\n        GAUtil.pageview('hakogaki');\n    }\n\n    useEffect(init, []);\n\n    return (\n        <HelmetProvider>\n            <Helmet>\n                <title>{C.APP_NAME}</title>\n            </Helmet>\n            <Main className=\"App\">\n                <MemoHeader title={scenario.title} />\n                {paragraphList}\n                <MemoAddParagraphButton />\n            </Main>\n            <AutoSaveCautionModal ref={autoSaveCationModalRef} />\n        </HelmetProvider>\n    );\n}\n\nexport default App;","import React from 'react';\r\nimport { HashRouter, Switch, Route, } from 'react-router-dom';\r\n\r\nimport Hakogaki from './view/l5/Hakogaki';\r\n\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <HashRouter basename= {process.env.PUBLIC_URL + '/'}>\r\n            <Switch>\r\n                <Route path='/hakogaki' component={Hakogaki} />\r\n            </Switch>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default App;","import { combineReducers } from '@reduxjs/toolkit'\n\nimport ScenarioSlice from './ScenarioSlice';\n\nconst rootReducer = combineReducers({\n    scenario: ScenarioSlice.reducer,\n})\n \nexport type RootState = ReturnType<typeof rootReducer>\n \nexport default rootReducer;","import { combineReducers, configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nexport const store = configureStore({\n    reducer: rootReducer\n});\n\nexport type AppDispatch = typeof store.dispatch;\n\n// export type RootState = ReturnType<typeof store.getState>;\n// export type AppThunk<ReturnType = void> = ThunkAction<\n//     ReturnType,\n//     RootState,\n//     unknown,\n//     Action<string>\n// >;\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport { store } from './store';\r\nimport * as C from './lib/Const';\r\n\r\n\r\ninterface Props {\r\n    children?: React.ReactNode;\r\n}\r\n\r\nconst App = (props: Props) => {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <SnackbarProvider autoHideDuration={C.DurationNotification}>\r\n                {props.children}\r\n            </SnackbarProvider>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport Provider from './Provider';\r\nimport * as C from './lib/Const';\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}